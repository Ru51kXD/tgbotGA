from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
async def how_to_order(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùì –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π", callback_data="payment_issue")],
            [InlineKeyboardButton(text="‚ùì –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="address_issue")],
            [InlineKeyboardButton(text="‚ùì –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π", callback_data="cart_issue")],
            [InlineKeyboardButton(text="‚ùì –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data="pickup_issue")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await callback.message.answer(
            "üõí –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:\n\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç goldapple.ru\n"
            "2. –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
            "3. –ù–∞–∂–º–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'\n"
            "4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "5. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
            "6. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –Ω–∏–∂–µ:",
            reply_markup=kb
        )
    except Exception as e:
        logging.error(f"Error in how_to_order: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in how_to_order: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π"
async def payment_issue(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üí≥ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π:\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ\n"
            "- –ë–∞–Ω–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n"
            "- –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –∫–∞—Ä—Ç–µ\n\n"
            "–†–µ—à–µ–Ω–∏—è:\n"
            "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã\n"
            "- –°–≤—è–∂–∏—Ç–µ—Å—å —Å –±–∞–Ω–∫–æ–º –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏\n"
            "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É\n"
            "- –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="how_to_order")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in payment_issue: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in payment_issue: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏"
async def address_issue(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üìç –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –ê–¥—Ä–µ—Å –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
            "- –ù–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –≤–∞—à —Ä–µ–≥–∏–æ–Ω\n"
            "- –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            "–†–µ—à–µ–Ω–∏—è:\n"
            "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞\n"
            "- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –≤—Ö–æ–¥–∏—Ç –≤ –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "- –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è\n\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="how_to_order")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in address_issue: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in address_issue: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π"
async def cart_issue(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üõí –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ—Ä–∑–∏–Ω–æ–π:\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "- –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ\n"
            "- –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            "- –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n\n"
            "–†–µ—à–µ–Ω–∏—è:\n"
            "- –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É\n"
            "- –û—á–∏—Å—Ç–∏—Ç–µ –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞\n"
            "- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
            "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞\n\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="how_to_order")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in cart_issue: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in cart_issue: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∞–º–æ–≤—ã–≤–æ–∑"
async def pickup_issue(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üöö –°–∞–º–æ–≤—ã–≤–æ–∑:\n\n"
            "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–∞–º–æ–≤—ã–≤–æ–∑:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
            "2. –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–°–∞–º–æ–≤—ã–≤–æ–∑'\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏\n"
            "4. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
            "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:\n"
            "- –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞\n"
            "- –ü–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
            "–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ - 5 –¥–Ω–µ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="how_to_order")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in pickup_issue: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in pickup_issue: {ex}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp):
    dp.callback_query(lambda c: c.data == "how_to_order")(how_to_order)
    dp.callback_query(lambda c: c.data == "payment_issue")(payment_issue)
    dp.callback_query(lambda c: c.data == "address_issue")(address_issue)
    dp.callback_query(lambda c: c.data == "cart_issue")(cart_issue)
    dp.callback_query(lambda c: c.data == "pickup_issue")(pickup_issue) 