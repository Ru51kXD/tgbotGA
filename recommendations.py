import logging
import json
import sqlite3
import random
from datetime import datetime
import pandas as pd
from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
class RecommendationState(StatesGroup):
    choosing_category = State()
    waiting_for_criteria = State()
    choosing_criteria = State()
    waiting_for_operator_reply = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_storage = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
recommendation_requests = {}

# ID —á–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ main.py –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
OPERATOR_CHAT_ID = None

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    try:
        import os
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ë–î
        db_exists = os.path.exists('recommendations.db')
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect('recommendations.db')
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if db_exists:
            cursor.execute("PRAGMA table_info(products)")
            columns = [col[1] for col in cursor.fetchall()]
            print(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã products: {columns}")
            
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ attributes, —É–¥–∞–ª—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
            if 'attributes' not in columns:
                print("–°—Ç–æ–ª–±–µ—Ü attributes –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É...")
                cursor.execute('DROP TABLE IF EXISTS products')
                db_exists = False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not db_exists:
            print("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É products...")
            cursor.execute('''CREATE TABLE IF NOT EXISTS products
                          (id INTEGER PRIMARY KEY,
                          name TEXT,
                          category TEXT,
                          price REAL,
                          rating REAL,
                          attributes TEXT)''')
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
            products = [
                (1, '–¢—É—à—å –¥–ª—è —Ä–µ—Å–Ω–∏—Ü Volume', 'mascara', 1500, 4.8, 
                 json.dumps({
                     "effect": ["volume", "length"],
                     "type": "waterproof",
                     "brush": "silicone",
                     "price": "medium"
                 })),
                (2, '–ü–æ–º–∞–¥–∞ –º–∞—Ç–æ–≤–∞—è Ruby', 'lipstick', 2300, 4.5,
                 json.dumps({
                     "type": "matte",
                     "finish": "velvet",
                     "longevity": "long",
                     "color": "red",
                     "price": "premium"
                 })),
                (3, '–ü–∞—Ä—Ñ—é–º Rose Garden', 'perfume', 4500, 4.9,
                 json.dumps({
                     "type": ["floral", "sweet"],
                     "intensity": "medium",
                     "longevity": "long",
                     "season": ["spring", "summer"],
                     "price": "medium"
                 })),
                (4, '–ü–æ–º–∞–¥–∞ –≥–ª—è–Ω—Ü–µ–≤–∞—è Pearl', 'lipstick', 1800, 4.7,
                 json.dumps({
                     "type": "glossy",
                     "finish": "shimmer",
                     "longevity": "medium",
                     "color": "nude",
                     "price": "medium"
                 })),
                (5, '–¢—É—à—å –¥–ª—è —Ä–µ—Å–Ω–∏—Ü Dramatic', 'mascara', 2500, 4.6,
                 json.dumps({
                     "effect": ["volume", "curl"],
                     "type": "waterproof",
                     "brush": "curved",
                     "price": "premium"
                 })),
                (6, '–¢—É—à—å –¥–ª—è —Ä–µ—Å–Ω–∏—Ü Natural Look', 'mascara', 900, 4.3,
                 json.dumps({
                     "effect": ["separation", "definition"],
                     "type": "regular",
                     "brush": "traditional",
                     "price": "budget"
                 })),
                (7, '–ü–æ–º–∞–¥–∞ –∂–∏–¥–∫–∞—è Velvet', 'lipstick', 1700, 4.8,
                 json.dumps({
                     "type": "liquid",
                     "finish": "velvet",
                     "longevity": "long",
                     "color": "berry",
                     "price": "medium"
                 })),
                (8, '–ü–∞—Ä—Ñ—é–º Citrus Fresh', 'perfume', 3500, 4.3,
                 json.dumps({
                     "type": ["citrus", "fresh"],
                     "intensity": "light",
                     "longevity": "medium",
                     "season": ["summer"],
                     "price": "medium"
                 })),
                (9, '–¢—É—à—å –¥–ª—è —Ä–µ—Å–Ω–∏—Ü Natural', 'mascara', 900, 4.2,
                 json.dumps({
                     "effect": ["length", "separation"],
                     "type": "regular",
                     "brush": "natural",
                     "price": "budget"
                 })),
                (10, '–ü–∞—Ä—Ñ—é–º Tropical Night', 'perfume', 5500, 4.7,
                 json.dumps({
                     "type": ["tropical", "spicy"],
                     "intensity": "strong",
                     "longevity": "long",
                     "season": ["summer", "autumn"],
                     "price": "premium"
                 }))
            ]
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            cursor.executemany('INSERT INTO products VALUES (?,?,?,?,?,?)', products)
            conn.commit()
            print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT COUNT(*) FROM products")
        row_count = cursor.fetchone()[0]
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {row_count}")
        
        conn.close()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î
        try:
            import os
            if os.path.exists('recommendations.db'):
                os.remove('recommendations.db')
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î
            conn = sqlite3.connect('recommendations.db')
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS products
                          (id INTEGER PRIMARY KEY,
                          name TEXT,
                          category TEXT,
                          price REAL,
                          rating REAL,
                          attributes TEXT)''')
            conn.commit()
            conn.close()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏")
        except Exception as inner_e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {inner_e}")
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {inner_e}")

def get_category_criteria_keyboard(category: str, selected_criteria: list = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    if selected_criteria is None:
        selected_criteria = []
    
    # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_data = getattr(ProductCategories, category.upper(), {})
    
    buttons = []
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    emoji_map = {
        "type": "üè∑Ô∏è",
        "effect": "‚ú®",
        "finish": "üé®",
        "longevity": "‚è±Ô∏è",
        "color": "üåà",
        "brush": "üñåÔ∏è",
        "price": "üí∞",
        "intensity": "üí™",
        "season": "üçÉ"
    }
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏
    for criteria_group, criteria_values in category_data.items():
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å —ç–º–æ–¥–∑–∏
        group_emoji = emoji_map.get(criteria_group, "üìã")
        buttons.append([InlineKeyboardButton(
            text=f"{group_emoji} {criteria_group.title()}",
            callback_data=f"header_{criteria_group}"
        )])
        
        # –ö–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        criteria_buttons = []
        for criteria_id, criteria_name in criteria_values.items():
            # –í—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π
            is_selected = f"{criteria_group}_{criteria_id}" in selected_criteria
            marker = "‚úÖ " if is_selected else "‚¨ú "
            criteria_emoji = ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            if criteria_group == "type":
                if criteria_id == "matte": criteria_emoji = "üé≠ "
                elif criteria_id == "glossy": criteria_emoji = "‚ú® "
                elif criteria_id == "liquid": criteria_emoji = "üíß "
                elif criteria_id == "satin": criteria_emoji = "üßµ "
                elif criteria_id == "waterproof": criteria_emoji = "üí¶ "
                elif criteria_id == "regular": criteria_emoji = "üìè "
                elif criteria_id == "floral": criteria_emoji = "üå∏ "
                elif criteria_id == "citrus": criteria_emoji = "üçä "
                elif criteria_id == "woody": criteria_emoji = "üå≤ "
                elif criteria_id == "spicy": criteria_emoji = "üå∂Ô∏è "
                elif criteria_id == "sweet": criteria_emoji = "üç¨ "
                elif criteria_id == "fresh": criteria_emoji = "‚ùÑÔ∏è "
            elif criteria_group == "effect":
                if criteria_id == "volume": criteria_emoji = "üîù "
                elif criteria_id == "length": criteria_emoji = "üìè "
                elif criteria_id == "curl": criteria_emoji = "‚Ü™Ô∏è "
                elif criteria_id == "separation": criteria_emoji = "üîÄ "
            elif criteria_group == "finish":
                if criteria_id == "velvet": criteria_emoji = "üß∏ "
                elif criteria_id == "shimmer": criteria_emoji = "‚ú® "
                elif criteria_id == "cream": criteria_emoji = "üç¶ "
            elif criteria_group == "longevity":
                if criteria_id == "short": criteria_emoji = "‚è±Ô∏è "
                elif criteria_id == "medium": criteria_emoji = "‚è≤Ô∏è "
                elif criteria_id == "long": criteria_emoji = "‚è∞ "
            elif criteria_group == "color":
                if criteria_id == "nude": criteria_emoji = "ü§é "
                elif criteria_id == "red": criteria_emoji = "‚ù§Ô∏è "
                elif criteria_id == "berry": criteria_emoji = "üçì "
                elif criteria_id == "pink": criteria_emoji = "üíó "
            elif criteria_group == "brush":
                if criteria_id == "silicone": criteria_emoji = "üî¨ "
                elif criteria_id == "curved": criteria_emoji = "‚Ü™Ô∏è "
                elif criteria_id == "traditional": criteria_emoji = "üñåÔ∏è "
            elif criteria_group == "price":
                if criteria_id == "budget": criteria_emoji = "üí∏ "
                elif criteria_id == "medium": criteria_emoji = "üíµ "
                elif criteria_id == "premium": criteria_emoji = "üíé "
            elif criteria_group == "intensity":
                if criteria_id == "light": criteria_emoji = "üïØÔ∏è "
                elif criteria_id == "medium": criteria_emoji = "üí° "
                elif criteria_id == "strong": criteria_emoji = "üîÜ "
            elif criteria_group == "season":
                if criteria_id == "spring": criteria_emoji = "üå± "
                elif criteria_id == "summer": criteria_emoji = "‚òÄÔ∏è "
                elif criteria_id == "autumn": criteria_emoji = "üçÇ "
                elif criteria_id == "winter": criteria_emoji = "‚ùÑÔ∏è "
                
            criteria_buttons.append(InlineKeyboardButton(
                text=f"{marker}{criteria_emoji}{criteria_name}",
                callback_data=f"criteria_{category}_{criteria_group}_{criteria_id}"
            ))
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ 2 –≤ —Ä—è–¥
        row = []
        for button in criteria_buttons:
            row.append(button)
            if len(row) == 2:
                buttons.append(row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            buttons.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons.extend([
        [InlineKeyboardButton(text="‚ú® –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data=f"show_recommendations_{category}")],
        [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"reset_criteria_{category}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_user_data(user_id: int) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    return user_storage.get(user_id, {
        'view_history': [],
        'purchase_history': [],
        'preferences': {}
    })

# –ö–ª–∞—Å—Å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
class ProductCategories:
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—É—à–∏
    MASCARA = {
        "effect": {
            "volume": "–û–±—ä–µ–º —Ä–µ—Å–Ω–∏—Ü",
            "length": "–£–¥–ª–∏–Ω–µ–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
            "curl": "–ü–æ–¥–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü",
            "separation": "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü"
        },
        "type": {
            "waterproof": "–í–æ–¥–æ—Å—Ç–æ–π–∫–∞—è",
            "regular": "–û–±—ã—á–Ω–∞—è",
            "fibrous": "–° —Ñ–∏–±—Ä–∞–º–∏"
        },
        "brush": {
            "silicone": "–°–∏–ª–∏–∫–æ–Ω–æ–≤–∞—è —â–µ—Ç–æ—á–∫–∞",
            "curved": "–ò–∑–æ–≥–Ω—É—Ç–∞—è —â–µ—Ç–æ—á–∫–∞",
            "traditional": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —â–µ—Ç–æ—á–∫–∞"
        },
        "price": {
            "budget": "–ë—é–¥–∂–µ—Ç–Ω–∞—è (–¥–æ 1000—Ä)",
            "medium": "–°—Ä–µ–¥–Ω—è—è (1000-2000—Ä)",
            "premium": "–ü—Ä–µ–º–∏—É–º (–æ—Ç 2000—Ä)"
        }
    }

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–º–∞–¥—ã
    LIPSTICK = {
        "type": {
            "matte": "–ú–∞—Ç–æ–≤–∞—è",
            "glossy": "–ì–ª—è–Ω—Ü–µ–≤–∞—è",
            "liquid": "–ñ–∏–¥–∫–∞—è",
            "satin": "–°–∞—Ç–∏–Ω–æ–≤–∞—è"
        },
        "finish": {
            "velvet": "–ë–∞—Ä—Ö–∞—Ç–Ω—ã–π —Ñ–∏–Ω–∏—à",
            "shimmer": "–° —à–∏–º–º–µ—Ä–æ–º",
            "cream": "–ö—Ä–µ–º–æ–≤—ã–π —Ñ–∏–Ω–∏—à"
        },
        "longevity": {
            "short": "–û–±—ã—á–Ω–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å",
            "medium": "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–π–∫–æ—Å—Ç—å",
            "long": "–î–æ–ª–≥–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å"
        },
        "color": {
            "nude": "–ù—é–¥–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏",
            "red": "–ö—Ä–∞—Å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏",
            "berry": "–Ø–≥–æ–¥–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏",
            "pink": "–†–æ–∑–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏"
        }
    }

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∞—Ä—Ñ—é–º–∞
    PERFUME = {
        "type": {
            "floral": "–¶–≤–µ—Ç–æ—á–Ω—ã–µ",
            "citrus": "–¶–∏—Ç—Ä—É—Å–æ–≤—ã–µ",
            "woody": "–î—Ä–µ–≤–µ—Å–Ω—ã–µ",
            "spicy": "–ü—Ä—è–Ω—ã–µ",
            "sweet": "–°–ª–∞–¥–∫–∏–µ",
            "fresh": "–°–≤–µ–∂–∏–µ"
        },
        "intensity": {
            "light": "–õ–µ–≥–∫–∏–π –∞—Ä–æ–º–∞—Ç",
            "medium": "–°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å",
            "strong": "–ù–∞—Å—ã—â–µ–Ω–Ω—ã–π –∞—Ä–æ–º–∞—Ç"
        },
        "longevity": {
            "short": "–ù–µ–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π",
            "medium": "–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–π–∫–æ—Å—Ç—å",
            "long": "–°—Ç–æ–π–∫–∏–π"
        },
        "season": {
            "spring": "–í–µ—Å–µ–Ω–Ω–∏–π",
            "summer": "–õ–µ—Ç–Ω–∏–π",
            "autumn": "–û—Å–µ–Ω–Ω–∏–π",
            "winter": "–ó–∏–º–Ω–∏–π"
        }
    }

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
class RecommendationSystem:
    def __init__(self):
        self.last_update = datetime.now()
        self.products = self._load_from_db()
        
    def _load_from_db(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        conn = sqlite3.connect('recommendations.db')
        df = pd.read_sql_query('SELECT * FROM products', conn)
        conn.close()
        return df

    def _refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"""
        if (datetime.now() - self.last_update).seconds > 7200:
            self.products = self._load_from_db()
            self.last_update = datetime.now()

    def get_recommendations(self, user_data: dict) -> list:
        self._refresh_data()
        strategies = [
            self._popularity_based,
            self._price_based,
            self._category_based,
            self._random_mix
        ]
        strategy = random.choice(strategies)
        return strategy(user_data)

    def _popularity_based(self, user_data) -> list:
        """–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"""
        return self.products.sort_values('rating', ascending=False).head(3).to_dict('records')

    def _price_based(self, user_data) -> list:
        """–ü–æ–¥–±–æ—Ä –ø–æ —Ü–µ–Ω–æ–≤–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É"""
        avg_price = user_data.get('avg_purchase_price', 2000)
        return self.products[
            (self.products['price'] > avg_price * 0.8) &
            (self.products['price'] < avg_price * 1.2)
        ].sample(3, random_state=random.randint(0, 1000)).to_dict('records')

    def _category_based(self, user_data) -> list:
        """–ü–æ–¥–±–æ—Ä –ø–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        preferred_categories = user_data.get('preferred_categories', ['mascara', 'lipstick', 'perfume'])
        result = []
        
        for category in preferred_categories:
            category_products = self.products[self.products['category'] == category]
            if not category_products.empty:
                result.append(category_products.sample(1, random_state=random.randint(0, 1000)).iloc[0].to_dict())
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ 3 —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
        while len(result) < 3 and len(self.products) > len(result):
            random_product = self.products.sample(1, random_state=random.randint(0, 1000)).iloc[0].to_dict()
            if random_product not in result:
                result.append(random_product)
                
        return result

    def _random_mix(self, user_data) -> list:
        """–°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        return self.products.sample(3, random_state=random.randint(0, 1000)).to_dict('records')

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
class AdvancedRecommendationSystem:
    def get_recommendations(self, category: str, criteria: list) -> list:
        # –î–æ–±–∞–≤–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–ü–æ–∏—Å–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}, –∫—Ä–∏—Ç–µ—Ä–∏–∏: {criteria}")
        conn = sqlite3.connect('recommendations.db')
        cursor = conn.cursor()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–æ–ª–±–µ—Ü attributes –≤ —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute("PRAGMA table_info(products)")
            columns = [col[1] for col in cursor.fetchall()]
            print(f"–°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã products: {columns}")
            
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = f"SELECT * FROM products WHERE category = ?"
            params = [category]
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü attributes –∏ –∑–∞–¥–∞–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if 'attributes' in columns and criteria:
                query += " AND " + " AND ".join(["attributes LIKE ?" for _ in criteria])
                params += [f'%{c}%' for c in criteria]
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            print(f"SQL –∑–∞–ø—Ä–æ—Å: {query}, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            cursor.execute(query, params)
            results = cursor.fetchall()
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            
            return self._parse_results(results, columns)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            print(f"–û—à–∏–±–∫–∞ SQL: {e}")
            return []
        finally:
            conn.close()

    def _parse_results(self, results, columns):
        try:
            parsed_results = []
            # –ò–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ attributes
            attributes_index = columns.index('attributes') if 'attributes' in columns else None
            
            for row in results:
                product = {
                    'id': row[0],
                    'name': row[1],
                    'category': row[2],
                    'price': row[3]
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã, –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if attributes_index is not None and len(row) > attributes_index:
                    try:
                        product['attributes'] = json.loads(row[attributes_index])
                    except (json.JSONDecodeError, TypeError) as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {row[0]}: {e}")
                        product['attributes'] = {}
                else:
                    product['attributes'] = {}
                
                parsed_results.append(product)
            
            return parsed_results
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async def start_recommendations(callback: types.CallbackQuery, state: FSMContext = None):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
        if state:
            await state.clear()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤
        categories_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíÑ –ü–æ–º–∞–¥–∞", callback_data="category_lipstick")],
            [InlineKeyboardButton(text="üëÅÔ∏è –¢—É—à—å –¥–ª—è —Ä–µ—Å–Ω–∏—Ü", callback_data="category_mascara")],
            [InlineKeyboardButton(text="üß¥ –ü–∞—Ä—Ñ—é–º", callback_data="category_perfume")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await callback.message.edit_text(
            "üîç *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤, –∏ –º—ã –ø–æ–¥–±–µ—Ä–µ–º –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!",
            parse_mode="Markdown",
            reply_markup=categories_kb
        )
    except Exception as e:
        logging.error(f"Error in start_recommendations: {e}")
        await callback.message.answer(
            "üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )

async def select_category(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = callback.data.split("_")[1]
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"DEBUG: select_category - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID, –µ—Å–ª–∏ –∏–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        user_tag = f"@{callback.from_user.username}" if callback.from_user.username else f"ID: {callback.from_user.id}"
        user_name = callback.from_user.full_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await state.update_data(selected_category=category)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        message = await callback.message.edit_text(
            f"‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è {get_category_name(category)}*\n\n"
            "–û—Ç–º–µ—Ç—å—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':",
            parse_mode="Markdown",
            reply_markup=get_category_criteria_keyboard(category)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(recommendation_message_id=message.message_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ —Å–ª–æ–≤–∞—Ä–µ
        recommendation_requests[callback.from_user.id] = {
            "category": category,
            "message_id": message.message_id,
            "user_tag": user_tag,
            "user_name": user_name
        }
        
        print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ recommendation_requests: {recommendation_requests[callback.from_user.id]}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        await state.set_state(RecommendationState.choosing_criteria)
    except Exception as e:
        logging.error(f"Error in select_category: {e}")
        print(f"DEBUG: –û—à–∏–±–∫–∞ –≤ select_category: {e}")
        await callback.message.answer(
            "üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )

async def toggle_criteria(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö
        parts = callback.data.split("_")
        category = parts[1]
        criteria_group = parts[2]
        criteria_id = parts[3]
        criteria_key = f"{criteria_group}_{criteria_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        selected_criteria = data.get("selected_criteria", [])
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
        print(f"DEBUG: –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏—è: {selected_criteria}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫—Ä–∏—Ç–µ—Ä–∏—è (–¥–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º)
        if criteria_key in selected_criteria:
            selected_criteria.remove(criteria_key)
        else:
            selected_criteria.append(criteria_key)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–í–ê–ñ–ù–û: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫)
        await state.update_data(selected_criteria=selected_criteria.copy())
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"DEBUG: –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è: {selected_criteria}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await callback.message.edit_text(
                f"‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è {get_category_name(category)}*\n\n"
                "–û—Ç–º–µ—Ç—å—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':",
                parse_mode="Markdown",
                reply_markup=get_category_criteria_keyboard(category, selected_criteria.copy())
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.message.edit_reply_markup(
                reply_markup=get_category_criteria_keyboard(category, selected_criteria.copy())
            )
        
    except Exception as e:
        logging.error(f"Error in toggle_criteria: {e}")
        # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

async def reset_criteria(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        category = callback.data.split("_")[2]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_criteria=[])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        try:
            await callback.message.edit_text(
                f"‚ú® *–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è {get_category_name(category)}*\n\n"
                "–û—Ç–º–µ—Ç—å—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–ª—è –≤–∞—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏':",
                parse_mode="Markdown",
                reply_markup=get_category_criteria_keyboard(category, [])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.edit_reply_markup(
                reply_markup=get_category_criteria_keyboard(category, [])
            )
        
    except Exception as e:
        logging.error(f"Error in reset_criteria: {e}")
        # –¢–∏—Ö–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

async def show_recommendations(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("–ü–æ–¥–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        category = callback.data.split("_")[2]
        selected_criteria = data.get("selected_criteria", [])
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"DEBUG: –í—ã–±—Ä–∞–Ω—ã –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {selected_criteria}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        waiting_message = await callback.message.edit_text(
            "‚è≥ *–ù–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –ø–æ–¥–±–∏—Ä–∞—é—Ç –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã*\n\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ú—ã —É—á—Ç–µ–º –≤—Å–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø–æ–¥–±–µ—Ä–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏", callback_data=f"category_{category}")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        message_id = waiting_message.message_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        user_info = callback.from_user
        username = user_info.username if user_info.username else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        full_name = user_info.full_name
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        criteria_text = ""
        for criteria_key in selected_criteria:
            parts = criteria_key.split('_')
            if len(parts) == 2:
                group, value = parts
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è
                category_data = getattr(ProductCategories, category.upper(), {})
                if group in category_data and value in category_data[group]:
                    criteria_description = category_data[group][value]
                    criteria_text += f"- {group.title()}: {criteria_description}\n"
        
        if not criteria_text:
            criteria_text = "–ö—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        operator_message = (
            f"üîî *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*\n\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_name} (ID: {user_id})\n"
            f"Username: @{username}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{get_category_name(category)}*\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:\n{criteria_text}\n\n"
            f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"`/send_link {user_id} [—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä]`"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        from main import bot
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        try:
            await bot.send_message(
                chat_id=OPERATOR_CHAT_ID,
                text=operator_message,
                parse_mode="Markdown"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            recommendation_requests[user_id] = {
                "message_id": message_id,
                "category": category,
                "criteria": selected_criteria,
                "waiting_since": asyncio.get_event_loop().time()
            }
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            await state.set_state(RecommendationState.waiting_for_operator_reply)
            await state.update_data(
                waiting_message_id=message_id,
                category=category,
                selected_criteria=selected_criteria
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            advanced_system = AdvancedRecommendationSystem()
            recommendations = advanced_system.get_recommendations(category, selected_criteria)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            await send_auto_recommendations(callback.message, category, recommendations)
            await state.clear()
        
    except Exception as e:
        logging.error(f"Error in show_recommendations: {e}")
        await callback.message.answer(
            "üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )

async def send_auto_recommendations(message, category, recommendations):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    try:
        # –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not recommendations:
            await message.edit_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫—Ä–∏—Ç–µ—Ä–∏—è–º", callback_data=f"category_{category}")],
                    [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="recommend_products")],
                    [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        text = "‚ú® *–í–æ—Ç —á—Ç–æ –º—ã –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:*\n\n"
        
        for i, product in enumerate(recommendations, 1):
            text += f"*{i}. {product['name']}*\n"
            text += f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–æ–≤–∞—Ä–∞
            if 'attributes' in product:
                for attr_type, attr_value in product['attributes'].items():
                    if isinstance(attr_value, list):
                        attr_value = ", ".join(attr_value)
                    text += f"- {attr_type.capitalize()}: {attr_value}\n"
            
            text += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –µ—â—ë", callback_data=f"category_{category}")],
            [InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
            [InlineKeyboardButton(text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="recommend_products")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        await message.edit_text(
            text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")

async def test_send_link(message: types.Message):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_link –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å)
        print(f"DEBUG: test_send_link –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. ID —á–∞—Ç–∞: {message.chat.id}, –¢–µ–∫—Å—Ç: {message.text}")
        logging.info(f"test_send_link –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/send_link USER_ID –°–°–´–õ–ö–ê [–û–ü–ò–°–ê–ù–ò–ï]`",
                parse_mode="Markdown"
            )
            return
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            user_id = int(parts[1])
            link = parts[2].split(' ')[0]
            description = ""
            if len(parts[2].split(' ')) > 1:
                description = ' '.join(parts[2].split(' ')[1:])
            
            # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"DEBUG: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Å —Å—Å—ã–ª–∫–æ–π {link}")
            
            # –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞
            from main import bot
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ", url=link)],
                [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã", callback_data="recommend_products")],
                [InlineKeyboardButton(text="üìù –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = (
                "‚ú® *–ù–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:*\n\n"
                f"[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä]({link})\n\n"
            )
            
            if description:
                text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:*\n{description}\n\n"
            
            text += "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç."
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sent_message = await bot.send_message(
                chat_id=user_id,
                text=text,
                parse_mode="Markdown",
                reply_markup=keyboard,
                disable_web_page_preview=False
            )
            
            print(f"DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID —Å–æ–æ–±—â–µ–Ω–∏—è: {sent_message.message_id}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await message.reply(
                f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}",
                parse_mode="Markdown"
            )
            
        except ValueError:
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
                parse_mode="Markdown"
            )
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
            await message.reply(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}",
                parse_mode="Markdown"
            )
    except Exception as e:
        print(f"DEBUG: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        await message.reply(
            f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}",
            parse_mode="Markdown"
        )

# –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ test_send_link
async def send_link_test(message: types.Message):
    """–°–≤–µ—Ä—Ö–ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        print(f"DEBUG: [send_link_test] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
        
        # –†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /send_link_test ID –°–°–´–õ–ö–ê")
            return
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = parts[1]
        link = parts[2]
        
        print(f"DEBUG: [send_link_test] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, —Å—Å—ã–ª–∫–∞: {link}")
        
        # –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞
        from main import bot
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_message = await bot.send_message(
            chat_id=user_id,
            text=f"–¢–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {link}"
        )
        
        print(f"DEBUG: [send_link_test] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, ID: {sent_message.message_id}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await message.reply(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        print(f"DEBUG: [send_link_test] –û–®–ò–ë–ö–ê: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def get_category_name(category: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    categories = {
        "lipstick": "–ø–æ–º–∞–¥—ã",
        "mascara": "—Ç—É—à–∏ –¥–ª—è —Ä–µ—Å–Ω–∏—Ü",
        "perfume": "–ø–∞—Ä—Ñ—é–º–∞"
    }
    return categories.get(category, category)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_db()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ main.py
    global OPERATOR_CHAT_ID
    from main import OPERATOR_CHAT_ID as MAIN_OPERATOR_CHAT_ID
    OPERATOR_CHAT_ID = MAIN_OPERATOR_CHAT_ID
    
    print(f"DEBUG: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, OPERATOR_CHAT_ID={OPERATOR_CHAT_ID}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ü–ï–†–í–´–ú –≤ —Å–ø–∏—Å–∫–µ
    dp.message(lambda message: message.text and message.text.startswith("/debug_send"))(debug_send_message)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message(lambda message: message.text and message.text.startswith("/send_link_test"))(send_link_test)
    dp.message(lambda message: message.text and message.text.startswith("/send_link"))(test_send_link)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    dp.callback_query(lambda c: c.data == "product_recommendations")(start_recommendations)
    dp.callback_query(lambda c: c.data == "recommend_products")(start_recommendations)
    dp.callback_query(lambda c: c.data.startswith("category_"))(select_category)
    dp.callback_query(lambda c: c.data.startswith("criteria_"))(toggle_criteria)
    dp.callback_query(lambda c: c.data.startswith("header_"))(lambda c: c.answer("–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    dp.callback_query(lambda c: c.data.startswith("reset_criteria_"))(reset_criteria)
    dp.callback_query(lambda c: c.data.startswith("show_recommendations_"))(show_recommendations)
    dp.callback_query(lambda c: c.data == "back_to_categories")(start_recommendations)

async def process_category_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
        category = callback.data.split('_')[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_id = user_data.get('recommendation_message_id', callback.message.message_id)
        
        print(f"DEBUG: process_category_selection - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category}, message_id {message_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID, –µ—Å–ª–∏ –∏–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        user_tag = f"@{callback.from_user.username}" if callback.from_user.username else f"ID: {callback.from_user.id}"
        user_name = callback.from_user.full_name
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        recommendation_requests[callback.from_user.id] = {
            "category": category,
            "message_id": message_id,
            "message": callback.message,
            "user_tag": user_tag,
            "user_name": user_name
        }
        
        print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ recommendation_requests: {recommendation_requests[callback.from_user.id]}")
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: user_id={callback.from_user.id}, category={category}, message_id={message_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        operator_message = (
            f"üîî *–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} ({user_tag})\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category}*\n\n"
            f"*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
            f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            f"`/send_link {callback.from_user.id} –°–°–´–õ–ö–ê [–û–ø–∏—Å–∞–Ω–∏–µ]`\n\n"
            f"–ü—Ä–∏–º–µ—Ä: `/send_link {callback.from_user.id} https://example.com/product –û—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!`"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        from main import bot
        await bot.send_message(
            chat_id=OPERATOR_CHAT_ID,
            text=operator_message,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
        await callback.message.edit_text(
            "‚è≥ *–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!*\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: *{category}*\n\n"
            "–ù–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–∫–æ—Ä–æ –ø–æ–¥–±–µ—Ä–µ—Ç –¥–ª—è –≤–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ –ø—Ä–∏—à–ª–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await callback.message.edit_text(
                "üòû –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as edit_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {edit_error}") 

async def debug_send_message(message: types.Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        print(f"DEBUG: [debug_send_message] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {message.text}")
        
        # –†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /debug_send USER_ID –¢–ï–ö–°–¢")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        user_id = parts[1]
        text_message = parts[2]
        
        print(f"DEBUG: [debug_send_message] ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, —Ç–µ–∫—Å—Ç: {text_message}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        await message.reply(f"üëç –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç –Ω–∞–ø—Ä—è–º—É—é
        from main import bot
        
        try:
            # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
            try:
                print(f"DEBUG: [debug_send_message] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                user_info = await bot.get_chat(user_id)
                print(f"DEBUG: [debug_send_message] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info.id}, {user_info.type}")
            except Exception as user_error:
                print(f"DEBUG: [debug_send_message] –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_error}")
                await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {user_error}")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞
            try:
                print(f"DEBUG: [debug_send_message] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                chat_member = await bot.get_chat_member(user_id, bot.id)
                print(f"DEBUG: [debug_send_message] –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –±–æ—Ç–∞: {chat_member.status}")
            except Exception as perm_error:
                print(f"DEBUG: [debug_send_message] –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: {perm_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            try:
                print(f"DEBUG: [debug_send_message] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                sent_message = await bot.send_message(
                    chat_id=user_id,
                    text=f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text_message}"
                )
                print(f"DEBUG: [debug_send_message] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! ID: {sent_message.message_id}")
                await message.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!")
            except Exception as send_error:
                print(f"DEBUG: [debug_send_message] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {send_error}")
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
        
        except Exception as bot_error:
            print(f"DEBUG: [debug_send_message] –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º: {bot_error}")
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º: {bot_error}")
        
    except Exception as global_error:
        print(f"DEBUG: [debug_send_message] –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {global_error}")
        try:
            await message.reply(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {global_error}")
        except:
            print("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ!") 