from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import re

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã
class BalanceCheckState(StatesGroup):
    waiting_for_card_number = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∫–∞—Ä—Ç
gift_cards_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõí –ö–∞–∫ –∫—É–ø–∏—Ç—å?", callback_data="gift_how_to_buy")],
    [InlineKeyboardButton(text="üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?", callback_data="gift_how_to_use")],
    [InlineKeyboardButton(text="üë• –ö–∞—Ä—Ç—ã –¥–ª—è –∫–æ–ª–ª–µ–≥", callback_data="gift_for_colleagues")],
    [InlineKeyboardButton(text="üí≥ –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã", callback_data="gift_check_balance")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main")]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã"
async def gift_cards_menu(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã Gold Apple\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=gift_cards_kb
        )
    except Exception as e:
        logging.error(f"Error in gift_cards_menu: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in gift_cards_menu: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ –∫—É–ø–∏—Ç—å?"
async def gift_how_to_buy(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üõí –ö–∞–∫ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É Gold Apple:\n\n"
            "1. –ü–æ—Å–µ—Ç–∏—Ç–µ –ª—é–±–æ–π –º–∞–≥–∞–∑–∏–Ω Gold Apple\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ –Ω—É–∂–Ω—É—é —Å—É–º–º—É\n"
            "3. –û–ø–ª–∞—Ç–∏—Ç–µ –∫–∞—Ä—Ç—É –Ω–∞ –∫–∞—Å—Å–µ\n\n"
            "–ò–ª–∏ –∫—É–ø–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ —Å–∞–π—Ç–µ:\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç goldapple.ru/giftcard\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∑–∞–π–Ω –∏ —Å—É–º–º—É –∫–∞—Ä—Ç—ã\n"
            "3. –£–∫–∞–∂–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"
            "4. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã –∫–∞—Ä—Ç—ã –Ω–æ–º–∏–Ω–∞–ª–æ–º: 1000‚ÇΩ, 3000‚ÇΩ, 5000‚ÇΩ, 10000‚ÇΩ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º", callback_data="gift_cards")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in gift_how_to_buy: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in gift_how_to_buy: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?"
async def gift_how_to_use(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É Gold Apple:\n\n"
            "–í –º–∞–≥–∞–∑–∏–Ω–µ:\n"
            "1. –ü—Ä–µ–¥—ä—è–≤–∏—Ç–µ –∫–∞—Ä—Ç—É –Ω–∞ –∫–∞—Å—Å–µ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ\n"
            "2. –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã\n\n"
            "–ù–∞ —Å–∞–π—Ç–µ:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
            "2. –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã '–ü–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç–æ–π'\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ PIN-–∫–æ–¥ (–¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç)\n"
            "4. –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞\n\n"
            "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã: 1 –≥–æ–¥ —Å –º–æ–º–µ–Ω—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º", callback_data="gift_cards")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in gift_how_to_use: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in gift_how_to_use: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç—ã –¥–ª—è –∫–æ–ª–ª–µ–≥"
async def gift_for_colleagues(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üë• –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n"
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            "- –°–∫–∏–¥–∫–∏ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 10 –∫–∞—Ä—Ç\n"
            "- –ë—Ä–µ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç –ª–æ–≥–æ—Ç–∏–ø–æ–º –∫–æ–º–ø–∞–Ω–∏–∏\n"
            "- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–º–ø–∞–Ω–∏–∏\n"
            "- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n\n"
            "–î–ª—è –∑–∞–∫–∞–∑–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∫–∞—Ä—Ç:\n"
            "1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞ corporate@goldapple.ru\n"
            "2. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –∏ –∂–µ–ª–∞–µ–º—ã–µ –Ω–æ–º–∏–Ω–∞–ª—ã\n"
            "3. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º", callback_data="gift_cards")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in gift_for_colleagues: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in gift_for_colleagues: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã"
async def gift_check_balance(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        balance_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –§–∏–∑–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="gift_balance_physical")],
            [InlineKeyboardButton(text="üíª –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="gift_balance_digital")],
            [InlineKeyboardButton(text="‚ùì –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º", callback_data="gift_balance_problem")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º", callback_data="gift_cards")]
        ])
        
        await callback.message.answer(
            "üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã:",
            reply_markup=balance_kb
        )
    except Exception as e:
        logging.error(f"Error in gift_check_balance: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in gift_check_balance: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞"
async def gift_balance_physical(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.answer()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        await state.set_state(BalanceCheckState.waiting_for_card_number)
        
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX-XXXX-XXXX:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="gift_cards")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in gift_balance_physical: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in gift_balance_physical: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
async def process_card_number(message: types.Message, state: FSMContext):
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
    card_pattern = r"^\d{4}-\d{4}-\d{4}-\d{4}$"
    
    try:
        if re.match(card_pattern, message.text.strip()):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
            card_number = message.text.strip()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∫–∞—Ä—Ç—ã (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API)
            await message.answer(
                f"üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ {card_number}:\n\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: 3500‚ÇΩ\n"
                f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ 31.12.2024\n\n"
                f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–µ–¥—ä—è–≤–∏—Ç–µ –µ—ë –Ω–∞ –∫–∞—Å—Å–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–∞–π—Ç–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º", callback_data="gift_cards")],
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        else:
            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXX-XXXX-XXXX-XXXX.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="gift_balance_physical")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º", callback_data="gift_cards")]
                ])
            )
    except Exception as e:
        logging.error(f"Error in process_card_number: {e}")
        try:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in process_card_number: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞"
async def gift_balance_digital(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üíª –ë–∞–ª–∞–Ω—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã\n\n"
            "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã:\n"
            "1. –ù–∞–π–¥–∏—Ç–µ –ø–∏—Å—å–º–æ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π –≤ –≤–∞—à–µ–π –ø–æ—á—Ç–µ\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–∏—Å—å–º–∞\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞\n\n"
            "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ —Å–∞–π—Ç–µ goldapple.ru/giftcard/balance, –≤–≤–µ–¥—è –∫–æ–¥ –∫–∞—Ä—Ç—ã.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º", callback_data="gift_cards")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in gift_balance_digital: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in gift_balance_digital: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º"
async def gift_balance_problem(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "‚ùì –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n"
            "1. –ö–∞—Ä—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞\n"
            "2. –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –∏–ª–∏ PIN-–∫–æ–¥\n"
            "3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π\n\n"
            "–î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n"
            "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã\n\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 8-800-555-33-22 "
            "–∏–ª–∏ –Ω–∞ email support@goldapple.ru",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º", callback_data="gift_cards")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in gift_balance_problem: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in gift_balance_problem: {ex}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp):
    dp.callback_query(lambda c: c.data == "gift_cards")(gift_cards_menu)
    dp.callback_query(lambda c: c.data == "gift_how_to_buy")(gift_how_to_buy)
    dp.callback_query(lambda c: c.data == "gift_how_to_use")(gift_how_to_use)
    dp.callback_query(lambda c: c.data == "gift_for_colleagues")(gift_for_colleagues)
    dp.callback_query(lambda c: c.data == "gift_check_balance")(gift_check_balance)
    dp.callback_query(lambda c: c.data == "gift_balance_physical")(gift_balance_physical)
    dp.message(BalanceCheckState.waiting_for_card_number)(process_card_number)
    dp.callback_query(lambda c: c.data == "gift_balance_digital")(gift_balance_digital)
    dp.callback_query(lambda c: c.data == "gift_balance_problem")(gift_balance_problem) 