from aiogram import types, Dispatcher
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import logging
# from aiogram.dispatcher import Dispatcher

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", url="https://goldapple.ru/catalog")],
    [InlineKeyboardButton(text="üìç –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã", url="https://goldapple.ru/stores")],
    [InlineKeyboardButton(text="üí° FAQ (–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã)", url="https://goldapple.ru/faq")],
    [InlineKeyboardButton(text="üî• –ê–∫—Ü–∏–∏", callback_data="sales")],
    [InlineKeyboardButton(text="üì≠ –ù–µ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∞", callback_data="missing_card")],
    [InlineKeyboardButton(text="üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data="order_status")],
    [InlineKeyboardButton(text="üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_request")],
    [InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="gift_cards")],
    [InlineKeyboardButton(text="üõí –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="how_to_order")],
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancellation")],
    [InlineKeyboardButton(text="üõçÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É", callback_data="product_recommendations")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:
    1. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç message —Å –º–µ—Ç–æ–¥–æ–º edit_text, –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    2. –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    print(f"DEBUG: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤—ã–∑–≤–∞–Ω–æ –¥–ª—è {getattr(message, 'chat', {}).get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def send_new_menu():
        try:
            if hasattr(message, 'answer'):
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                    reply_markup=main_menu_kb
                )
            elif hasattr(message, 'send_message'):
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ bot
                chat_id = message.chat.id
                await message.send_message(
                    chat_id=chat_id,
                    text="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                    reply_markup=main_menu_kb
                )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é: {e}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    try:
        if hasattr(message, 'edit_text'):
            await message.edit_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=main_menu_kb
            )
            return
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω—é: {e}")
        await send_new_menu()
        return
    
    # –ï—Å–ª–∏ —Å—é–¥–∞ –¥–æ—à–ª–∏, –∑–Ω–∞—á–∏—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ
    await send_new_menu()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext = None):
    print(f"DEBUG: back_to_main_menu callback received from user {callback.from_user.id}")
    
    try:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
        if state:
            await state.clear()
            print(f"DEBUG: State cleared for user {callback.from_user.id}")
            
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu_kb
        )
    except Exception as e:
        logging.error(f"Error in back_to_main_menu: {e}")
        try:
            await callback.message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=main_menu_kb
            )
        except Exception as ex:
            logging.error(f"Failed to send main menu message in back_to_main_menu: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_cmd(message: types.Message):
    try:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Gold Apple. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            reply_markup=main_menu_kb
        )
    except Exception as e:
        logging.error(f"Error in start_cmd: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp: Dispatcher):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    @dp.message(lambda message: message.text == "/start")
    async def start_handler(message: types.Message):
        await start_cmd(message)
    
    # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /menu
    @dp.message(lambda message: message.text == "/menu")
    async def menu_handler(message: types.Message):
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer(
            "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu_kb
        )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    @dp.callback_query(lambda c: c.data == "back_to_main")
    async def back_to_main_handler(callback: types.CallbackQuery, state: FSMContext):
        await back_to_main_menu(callback, state) 