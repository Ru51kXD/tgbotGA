from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é "–ù–µ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∞"
missing_card_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì≠ –ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–∞", callback_data="card_not_arrived")],
    [InlineKeyboardButton(text="üì± –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS", callback_data="resend_sms")],
    [InlineKeyboardButton(text="‚è± –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="shipping_time")],
    [InlineKeyboardButton(text="üìù –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="update_card_info")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∞"
async def missing_card_menu(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üì≠ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∫–∞—Ä—Ç—ã\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
            reply_markup=missing_card_kb
        )
    except Exception as e:
        logging.error(f"Error in missing_card_menu: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in missing_card_menu: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–∞"
async def card_not_arrived(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üì≠ –ö–∞—Ä—Ç–∞ –Ω–µ –ø—Ä–∏—à–ª–∞\n\n"
            "–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞—Ä—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏, —ç—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:\n\n"
            "1. –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ - –¥–æ 14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)\n"
            "2. –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
            "3. –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—á—Ç–æ–≤—ã–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º\n\n"
            "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
            "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ\n"
            "- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
            "- –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±–æ–π\n\n"
            "–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–æ–ª–µ–µ 14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="missing_card")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in card_not_arrived: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in card_not_arrived: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS"
async def resend_sms(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üì± –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ SMS\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS —Å –∫–æ–¥–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:\n\n"
            "1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ goldapple.ru\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∫–∞—Ä—Ç—ã'\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS\n"
            "4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS –ø–æ–≤—Ç–æ—Ä–Ω–æ'\n\n"
            "–ò–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 8-800-555-33-22.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="missing_card")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in resend_sms: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in resend_sms: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
async def shipping_time(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "‚è± –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–∞—Ä—Ç\n\n"
            "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–∞—Ä—Ç Gold Apple:\n\n"
            "üèô –ú–æ—Å–∫–≤–∞ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥: 2-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n"
            "üèô –î—Ä—É–≥–∏–µ –∫—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: 5-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n"
            "üèô –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: 7-14 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n\n"
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ email –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n\n"
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ –ø–µ—Ä–∏–æ–¥—ã –≤—ã—Å–æ–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–ø—Ä–∞–∑–¥–Ω–∏–∫–∏, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏) —Å—Ä–æ–∫–∏ –º–æ–≥—É—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="missing_card")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in shipping_time: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in shipping_time: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
async def update_card_info(callback: types.CallbackQuery):
    try:
        await callback.answer()
        
        await callback.message.answer(
            "üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã\n\n"
            "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–∞—Ä—Ç—ã:\n\n"
            "1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ goldapple.ru\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü—Ä–æ—Ñ–∏–ª—å'\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'\n"
            "4. –ò–∑–º–µ–Ω–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å\n\n"
            "–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–ª—å–∑—è.\n"
            "–í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 8-800-555-33-22.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="missing_card")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in update_card_info: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in update_card_info: {ex}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp):
    dp.callback_query(lambda c: c.data == "missing_card")(missing_card_menu)
    dp.callback_query(lambda c: c.data == "card_not_arrived")(card_not_arrived)
    dp.callback_query(lambda c: c.data == "resend_sms")(resend_sms)
    dp.callback_query(lambda c: c.data == "shipping_time")(shipping_time)
    dp.callback_query(lambda c: c.data == "update_card_info")(update_card_info) 