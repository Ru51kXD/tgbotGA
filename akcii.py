from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ü–∏–∏"
async def show_sales(callback: types.CallbackQuery):
    try:
        await callback.answer()
        await callback.message.answer(
            "üî• –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏:\n\n"
            "1. –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n"
            "2. –°–∫–∏–¥–∫–∞ 5% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π Gold\n"
            "3. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 5000‚ÇΩ\n\n"
            "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ: https://goldapple.ru/sales",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–°–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑", callback_data="first_order_discount")],
                [InlineKeyboardButton(text="–°–∫–∏–¥–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π", callback_data="card_discount")],
                [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )
    except Exception as e:
        logging.error(f"Error in show_sales: {e}")
        try:
            await callback.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
        except Exception as ex:
            logging.error(f"Failed to send error message in show_sales: {ex}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑"
async def first_order_discount(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üéÅ –°–∫–∏–¥–∫–∞ 20% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n\n"
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:\n"
        "- –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ goldapple.ru\n"
        "- –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "- –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ FIRST20 –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏\n\n"
        "–£—Å–ª–æ–≤–∏—è:\n"
        "- –î–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "- –ù–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ü–∏—è–º–∏\n"
        "- –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–∫—Ü–∏—è–º", callback_data="sales")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∫–∏–¥–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π"
async def card_discount(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üí≥ –°–∫–∏–¥–∫–∞ 5% –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π Gold\n\n"
        "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:\n"
        "- –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ goldapple.ru\n"
        "- –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã '–ö–∞—Ä—Ç–æ–π Gold'\n\n"
        "–£—Å–ª–æ–≤–∏—è:\n"
        "- –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        "- –°—É–º–º–∏—Ä—É–µ—Ç—Å—è —Å –±–æ–Ω—É—Å–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏\n"
        "- –ù–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π –±–æ–ª–µ–µ 40%",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–∫—Ü–∏—è–º", callback_data="sales")],
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
def register_handlers(dp):
    dp.callback_query(lambda c: c.data == "sales")(show_sales)
    dp.callback_query(lambda c: c.data == "first_order_discount")(first_order_discount)
    dp.callback_query(lambda c: c.data == "card_discount")(card_discount) 