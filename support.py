import logging
from aiogram import types, Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
class SupportState(StatesGroup):
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    in_chat = State()
    waiting_for_question = State()

# –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã {user_id: True}
active_chats = {}
user_contacts = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: phone_number}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ (–Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)
async def handle_contact(message: types.Message, bot, main_menu_kb):
    user_id = message.from_user.id
    if user_id in user_contacts:
        await message.answer("üìå –ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)
    else:
        user_contacts[user_id] = message.contact.phone_number
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–∞–∫ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –ø–æ–º–æ—á—å –≤–∞–º!", 
                           reply_markup=types.ReplyKeyboardRemove())
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async def operator_end_chat(message: types.Message, bot):
    try:
        target_user_id = int(message.text.split()[1])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if target_user_id in active_chats:
            active_chats.pop(target_user_id)
            await bot.send_message(target_user_id, "üì¥ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.")
            await message.answer(f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target_user_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")
        else:
            await message.answer("‚ùó –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    except (IndexError, ValueError):
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è].")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
async def end_chat_callback(callback: types.CallbackQuery, state: FSMContext, bot, OPERATOR_CHAT_ID):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("–ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback data
        user_id = callback.from_user.id
        
        if user_id in active_chats:
            active_chats.pop(user_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await callback.message.edit_text(
                "‚úÖ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞–º —Å–Ω–æ–≤–∞.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            await bot.send_message(
                OPERATOR_CHAT_ID,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç."
            )
            
            await state.clear()
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è –ß–∞—Ç —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                ])
            )
    except Exception as e:
        logging.error(f"Error in end_chat_callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∞—Ç–∞)
async def handle_messages(message: types.Message, state: FSMContext, bot, OPERATOR_CHAT_ID):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        return
        
    user_id = message.from_user.id
    current_state = await state.get_state()
    
    print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    if current_state == "SupportState:waiting_for_name":
        await handle_support_name(message, state, bot, OPERATOR_CHAT_ID)
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    if message.chat.id == OPERATOR_CHAT_ID:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.text.startswith("/") and not message.text.startswith("/end"):
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è
            parts = message.text.strip().split(maxsplit=1)
            
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 2 —á–∞—Å—Ç–∏ (ID –∏ —Ç–µ–∫—Å—Ç)
            if len(parts) != 2:
                await message.answer(
                    "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>123456789 –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?</code>"
                )
                return

            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                target_user_id = int(parts[0])
            except ValueError:
                await message.answer(
                    "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n"
                    "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                    "–ü—Ä–∏–º–µ—Ä: <code>123456789 –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</code>"
                )
                return

            text = parts[1]  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

            print(f"DEBUG: –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {text[:20]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if target_user_id not in active_chats:
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                await message.answer(
                    f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ.\n"
                    f"–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å—ë —Ä–∞–≤–Ω–æ?",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"force_send_{target_user_id}")],
                        [types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_send")]
                    ])
                )
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                sent_msg = await bot.send_message(
                    chat_id=target_user_id,
                    text=f"üë®‚Äçüíº <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {text}",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")]
                    ])
                )
                
                if sent_msg:
                    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                else:
                    await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n"
                "<code>ID_–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –¢–ï–ö–°–¢_–°–û–û–ë–©–ï–ù–ò–Ø</code>"
            )
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        is_in_support = (user_id in active_chats) or (current_state and "SupportState" in str(current_state))
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if is_in_support:
            print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message.text[:20]}...")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            if not current_state and user_id in active_chats:
                await state.set_state(SupportState.in_chat)
                print(f"DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SupportState.in_chat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if user_id not in active_chats:
                active_chats[user_id] = True
                print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            try:
                await bot.send_message(
                    OPERATOR_CHAT_ID,
                    f"üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}</b>:\n\n{message.text}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(
                    "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")]
                    ])
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")
                await message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")],
                        [types.InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
                    ])
                )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
async def start_support_chat(callback: types.CallbackQuery, state: FSMContext, bot, OPERATOR_CHAT_ID):
    user_id = callback.from_user.id
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer("–ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∞—Å –∫ —á–∞—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ —á–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if user_id in active_chats:
            await callback.message.answer(
                "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —á–∞—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data=f"end_chat")]
                ])
            )
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.set_state(SupportState.waiting_for_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await state.update_data(last_message_id=callback.message.message_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await callback.message.edit_text(
            "üëã <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
            ])
        )
        
    except Exception as e:
        logging.error(f"Error in start_support_chat: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —á–∞—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_support_name(message: types.Message, state: FSMContext, bot, OPERATOR_CHAT_ID):
    user_id = message.from_user.id
    user_name = message.text
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(user_support_name=user_name)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —á–∞—Ç–µ
        active_chats[user_id] = True
        await state.set_state(SupportState.in_chat)
        print(f"DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SupportState.in_chat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        support_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data="end_chat")],
            [types.InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "üë®‚Äçüíº <b>–í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —á–∞—Ç—É —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
            "–û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "<i>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.</i>",
            reply_markup=support_kb
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = message.from_user
        username = user_info.username if user_info.username else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        full_name = user_info.full_name if user_info.full_name else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        phone = user_contacts.get(user_id, "–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await bot.send_message(
            OPERATOR_CHAT_ID,
            f"üë§ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>\n\n"
            f"‚Ä¢ ID: <code>{user_id}</code>\n"
            f"‚Ä¢ –ò–º—è: {user_name}\n"
            f"‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è: {full_name}\n"
            f"‚Ä¢ Username: @{username}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            f"<code>{user_id} –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>\n\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞: /end {user_id}"
        )
        
    except Exception as e:
        logging.error(f"Error in handle_support_name: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher, bot: Bot, OPERATOR_CHAT_ID, main_menu_kb):
    print(f"DEBUG: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, OPERATOR_CHAT_ID={OPERATOR_CHAT_ID}")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    @dp.callback_query(F.data == "support_request")
    async def support_callback_wrapper(callback: types.CallbackQuery, state: FSMContext):
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω callback support_request –æ—Ç {callback.from_user.id}")
        await start_support_chat(callback, state, bot, OPERATOR_CHAT_ID)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    @dp.callback_query(lambda c: c.data == "end_chat")
    async def end_chat_wrapper(callback: types.CallbackQuery, state: FSMContext):
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω callback end_chat –æ—Ç {callback.from_user.id}")
        await end_chat_callback(callback, state, bot, OPERATOR_CHAT_ID)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ
    @dp.callback_query(lambda c: c.data and c.data.startswith("force_send_"))
    async def force_send_wrapper(callback: types.CallbackQuery, state: FSMContext):
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω callback force_send –æ—Ç {callback.from_user.id}")
        try:
            target_user_id = int(callback.data.split("_")[2])
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
            message_text = callback.message.text.split("\n")[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            parts = message_text.split()
            
            if len(parts) >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ"
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:\n"
                    f"–§–æ—Ä–º–∞—Ç: {target_user_id} –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
                active_chats[target_user_id] = True
                
                await callback.answer("–ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            else:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ force_send_wrapper: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    @dp.callback_query(lambda c: c.data == "cancel_send")
    async def cancel_send_wrapper(callback: types.CallbackQuery):
        await callback.message.edit_text("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.answer()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    @dp.message(lambda message: message.chat.id == OPERATOR_CHAT_ID and message.text and message.text.startswith("/end"))
    async def operator_end_chat_wrapper(message: types.Message):
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /end –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")
        await operator_end_chat(message, bot)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    @dp.message(lambda message: message.contact is not None)
    async def contact_handler_wrapper(message: types.Message):
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç {message.from_user.id}")
        await handle_contact(message, bot, main_menu_kb)
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    @dp.message()
    async def message_handler_wrapper(message: types.Message, state: FSMContext):
        print(f"DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
        await handle_messages(message, state, bot, OPERATOR_CHAT_ID) 