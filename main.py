import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OPERATOR_CHAT_ID = int(os.getenv("SUPPORT_CHAT_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã {user_id: True}
active_chats = {}


class SupportState(StatesGroup):
    in_chat = State()
    waiting_for_question = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞" + "FAQ"
support_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì© –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_request")],
    [InlineKeyboardButton(text="üí° FAQ (–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã)", url="https://goldapple.ru/faq")]
])

main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", url="https://goldapple.ru/catalog")],
    [InlineKeyboardButton(text="üî• –ê–∫—Ü–∏–∏", callback_data="sales")],  # –ë–´–õ URL, –°–¢–ê–õ–ê callback_data
    [InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", url="https://goldapple.ru/giftcard")],
    [InlineKeyboardButton(text="üìç –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã", url="https://goldapple.ru/stores")],
    [InlineKeyboardButton(text="üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data="order_status")],
    [InlineKeyboardButton(text="üí° FAQ (–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã)", url="https://goldapple.ru/faq")],
    [InlineKeyboardButton(text="üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_request")]
])
sales_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="10% –Ω–∞ –ü–ï–†–í–´–ô –∑–∞–∫–∞–∑", callback_data="first_order_discount")],
    [InlineKeyboardButton(text="–°–∫–∏–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ", callback_data="card_discount")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main")]
])
@dp.callback_query(lambda c: c.data == "first_order_discount")
async def first_order_discount(callback: types.CallbackQuery):
    await callback.message.answer("üéâ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 10% —Å–∫–∏–¥–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ *WELCOME10* –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏!", parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "card_discount")
async def card_discount(callback: types.CallbackQuery):
    await callback.message.answer("üí≥ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞—Ä—Ç–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∫–µ—à–±—ç–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏!")

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)

@dp.callback_query(lambda c: c.data == "sales")
async def show_sales(callback: types.CallbackQuery):
    message_text = """üî• *–ê–ö–¶–ò–ò –ò –°–ö–ò–î–ö–ò* üî•

üéÅ *10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!*  
–ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑.  

üí≥ *–°–∫–∏–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ*  
–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!  

üìÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ [–∑–¥–µ—Å—å](https://goldapple.ru/sale).
"""

    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=sales_kb)

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)

@dp.callback_query(lambda c: c.data == "order_status")
async def order_status(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:")
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:", reply_markup=support_kb)


@dp.callback_query(lambda c: c.data == "support_request")
async def support_request(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if user_id in active_chats:
        await callback.message.answer("‚ùó –í—ã —É–∂–µ –Ω–∞ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    active_chats[user_id] = True
    await state.set_state(SupportState.in_chat)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(OPERATOR_CHAT_ID, f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
                                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} (ID: {user_id})\n"
                                             f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await callback.message.answer("‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")


@dp.message()
async def handle_messages(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in active_chats:
        await bot.send_message(OPERATOR_CHAT_ID, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}")
        return

    # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if message.chat.id == OPERATOR_CHAT_ID:
        try:
            split_msg = message.text.split(" ", 1)
            target_user_id = int(split_msg[0])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reply_text = split_msg[1]  # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞

            if target_user_id in active_chats:
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
                buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", callback_data=f"more_questions_{target_user_id}")],
                    [InlineKeyboardButton(text="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_chat_{target_user_id}")]
                ])
                
                await bot.send_message(target_user_id, f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: {reply_text}", reply_markup=buttons)
            else:
                await message.answer("‚ùó –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
        except (IndexError, ValueError):
            await message.answer("‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


@dp.callback_query(lambda c: c.data.startswith("more_questions_"))
async def more_questions(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])

    if user_id in active_chats:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: "–í–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"
        question_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data=f"end_chat_{user_id}")]
        ])
        await bot.send_message(user_id, "ü§î –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å? –ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç?", reply_markup=question_kb)
        await state.set_state(SupportState.waiting_for_question)
    else:
        await callback.answer("–ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")


@dp.message(SupportState.waiting_for_question)
async def handle_more_questions(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id in active_chats:
        await bot.send_message(OPERATOR_CHAT_ID, f"üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {message.text}")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", callback_data=f"more_questions_{user_id}")],
            [InlineKeyboardButton(text="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_chat_{user_id}")]
        ])
        await bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç —Å–∫–æ—Ä–æ.", reply_markup=buttons)
        await state.set_state(SupportState.in_chat)


@dp.callback_query(lambda c: c.data.startswith("end_chat_"))
async def end_chat_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])

    if user_id in active_chats:
        active_chats.pop(user_id)
        await bot.send_message(user_id, "üì¥ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.")
        await bot.send_message(OPERATOR_CHAT_ID, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
        await state.clear()
    await callback.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
