import asyncio
import logging
import os
import random
import pandas as pd
import numpy as np
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.callback_data import CallbackData
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from aiogram.fsm.state import State, StatesGroup
from typing import Dict, Any
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
OPERATOR_CHAT_ID = int(os.getenv("SUPPORT_CHAT_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã {user_id: True}
active_chats = {}

class RecommendationState(StatesGroup):
    waiting_for_category = State()
    waiting_for_criteria = State()
# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProductSelectionState(StatesGroup):
    waiting_for_product_details = State()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
class BalanceCheckState(StatesGroup):
    waiting_for_card_number = State()

class SupportState(StatesGroup):
    in_chat = State()
    waiting_for_question = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
phone_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", url="https://goldapple.ru/catalog")],
    [InlineKeyboardButton(text="üìç –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã", url="https://goldapple.ru/stores")],
    [InlineKeyboardButton(text="üí° FAQ (–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã)", url="https://goldapple.ru/faq")],
    [InlineKeyboardButton(text="üî• –ê–∫—Ü–∏–∏", callback_data="sales")],
    [InlineKeyboardButton(text="üì≠ –ù–µ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∞", callback_data="missing_card")],
    #[InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", url="https://goldapple.ru/giftcard")],
    [InlineKeyboardButton(text="üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", callback_data="order_status")],
    [InlineKeyboardButton(text="üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support_request")],
    [InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã", callback_data="gift_cards")],
    [InlineKeyboardButton(text="üõí –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="how_to_order")],
    
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="cancel_order")],
    [InlineKeyboardButton(text="üõçÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É", callback_data="product_consultation")],
    [InlineKeyboardButton(text="üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="product_recommendations")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
])
gift_cards_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üõí –ö–∞–∫ –∫—É–ø–∏—Ç—å?", callback_data="gift_how_to_buy")],
    [InlineKeyboardButton(text="üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?", callback_data="gift_how_to_use")],
    [InlineKeyboardButton(text="üë• –ö–∞—Ä—Ç—ã –¥–ª—è –∫–æ–ª–ª–µ–≥", callback_data="gift_for_colleagues")],
    [InlineKeyboardButton(text="üí≥ –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã", callback_data="gift_check_balance")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main")]
])
#

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ù–µ –ø—Ä–∏—à–ª–∞ –∫–∞—Ä—Ç–∞"
missing_card_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì≠ –ö–∞—Ä—Ç–∞ –Ω–µ –¥–æ—à–ª–∞", callback_data="card_not_arrived")],
    [InlineKeyboardButton(text="üì© –ü—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å SMS", callback_data="resend_sms")],
    [InlineKeyboardButton(text="‚è≥ –£–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data="shipping_time")],
    [InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="update_card_info")],
    [InlineKeyboardButton(text="üéÅ –ö–∞–∫ –∫—É–ø–∏—Ç—å", callback_data="how_to_buy_card")],
    [InlineKeyboardButton(text="üõç –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data="how_to_use_card")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main")],
    [InlineKeyboardButton(text="‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="support_request")]
])

order_faq_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí≥ –í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ", callback_data="payment_issue")],
    [InlineKeyboardButton(text="üìç –ù–µ –º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å", callback_data="address_issue")],
    [InlineKeyboardButton(text="üõí –ù–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart_issue")],
    [InlineKeyboardButton(text="üöö –ü–æ—á–µ–º—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑?", callback_data="pickup_issue")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
cancel_order_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ–Ω—è–µ–º", callback_data="confirm_cancel")],
    [InlineKeyboardButton(text="‚ùå –ù–µ –±—É–¥—É –æ—Ç–º–µ–Ω—è—Ç—å", callback_data="decline_cancel")]
])
confirm_cancel_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä—É
product_consult_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí∞ –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ", callback_data="product_price_availability")],
    [InlineKeyboardButton(text="üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞", callback_data="product_quality_certificate")],
    [InlineKeyboardButton(text="üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="product_selection")],
    [InlineKeyboardButton(text="‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="support_request")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
])
recommendation_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üå∏ –î—É—Ö–∏", callback_data="recommend_perfume")],
    [InlineKeyboardButton(text="üíÑ –¢—É—à—å", callback_data="recommend_mascara")],
    [InlineKeyboardButton(text="üíã –ü–æ–º–∞–¥–∞", callback_data="recommend_lipstick")],
    [InlineKeyboardButton(text="üß¥ –£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π", callback_data="recommend_skincare")],
    [InlineKeyboardButton(text="üßº –°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –≤–∞–Ω–Ω—ã", callback_data="recommend_bath")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
])

criteria_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–µ", callback_data="criteria_budget")],
    [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="criteria_premium")],
    [InlineKeyboardButton(text="üèÜ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data="criteria_popular")],
    [InlineKeyboardButton(text="üéØ –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data="criteria_all")]
])

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(lambda c: c.data == "product_recommendations")
async def product_recommendations(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        parse_mode="Markdown",
        reply_markup=recommendation_kb
    )

@dp.callback_query(lambda c: c.data.startswith("recommend_"))
async def handle_recommendation_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_")[1]
    await state.update_data(category=category)
    
    await callback.message.edit_text(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–¥–±–æ—Ä–∞:",
        reply_markup=criteria_kb
    )
    await state.set_state(RecommendationState.waiting_for_criteria)

@dp.callback_query(lambda c: c.data.startswith("criteria_"), RecommendationState.waiting_for_criteria)
async def handle_criteria_selection(callback: types.CallbackQuery, state: FSMContext):
    criteria = callback.data.split("_")[1]
    user_data = await state.get_data()
    category = user_data.get('category')
    
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"
    phone_number = user_contacts.get(user_id, "–ù–µ —É–∫–∞–∑–∞–Ω")

    await bot.send_message(
        OPERATOR_CHAT_ID,
        f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"–ö—Ä–∏—Ç–µ—Ä–∏–∏: {criteria}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/send_recommendation {user_id} –≤–∞—à–∞_—Å—Å—ã–ª–∫–∞"
    )
    
    await callback.message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!")
    await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
@dp.message(lambda message: message.chat.id == OPERATOR_CHAT_ID and message.text.startswith("/send_recommendation"))
async def send_recommendation(message: Message):
    try:
        _, user_id, *link_parts = message.text.split()
        target_user_id = int(user_id)
        link = ' '.join(link_parts)
        
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä–∞–º", url=link)],
            [InlineKeyboardButton(text="üéØ –ù–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="product_recommendations")]
        ])
        
        await bot.send_message(
            target_user_id,
            f"üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{link}",
            reply_markup=markup
        )
        await message.answer("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É"
@dp.callback_query(lambda c: c.data == "product_consultation")
async def product_consultation(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=product_consult_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ"
@dp.callback_query(lambda c: c.data == "product_price_availability")
async def product_price_availability(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí∞ *–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞?*\n\n"
        "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∏ –Ω–∞–ª–∏—á–∏–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ. \n"
        "üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–¥–µ—Å—å: [–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥](https://goldapple.ru/catalog).",
        parse_mode="Markdown",
        reply_markup=product_consult_kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∫–∞—á–µ—Å—Ç–≤–∞"
@dp.callback_query(lambda c: c.data == "product_quality_certificate")
async def product_quality_certificate(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìú *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤* \n\n"
        "–í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        parse_mode="Markdown",
        reply_markup=product_consult_kb
    )
###############################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä"
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä"
@dp.callback_query(lambda c: c.data == "product_selection")
async def product_selection(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üîç *–ü–æ–º–æ–∂–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä!* \n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞–º –Ω—É–∂–µ–Ω.",
        parse_mode="Markdown"
    )

    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @dp.message()
    async def forward_to_operator(message: types.Message):
        user_id = message.from_user.id
        username = message.from_user.username or "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
        phone_number = "–ù–µ —É–∫–∞–∑–∞–Ω"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç —Ä–∞–Ω–µ–µ
        if message.contact:
            phone_number = message.contact.phone_number

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await bot.send_message(
            OPERATOR_CHAT_ID,
            f"üîî –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä —Ç–æ–≤–∞—Ä–∞!\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üìû –ù–æ–º–µ—Ä: {phone_number}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )
###################################################################################################################
@dp.callback_query(lambda c: c.data == "cancel_order")
async def cancel_order(callback: types.CallbackQuery):
    message_text = """‚ùå *–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑? ü§î*

–≠—Ö, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é —É—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã:
‚ñ´Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è  
‚ñ´Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ *10 –¥–Ω–µ–π* —Ç–µ–º –∂–µ —Å–ø–æ—Å–æ–±–æ–º, –∫–æ—Ç–æ—Ä—ã–º –æ–ø–ª–∞—á–∏–≤–∞–ª–∏  
‚ñ´Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ *–Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è*  
‚ñ´Ô∏è –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤  

–í—ã —É–≤–µ—Ä–µ–Ω—ã?  
"""
    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=cancel_order_kb)

@dp.callback_query(lambda c: c.data == "confirm_cancel")
async def confirm_cancel(callback: types.CallbackQuery):
    message_text = """üõë *–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?*  

1Ô∏è‚É£ –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –µ—â—ë –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É, –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ [–ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ](https://goldapple.ru/account/orders).  
2Ô∏è‚É£ –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –Ω–µ–≥–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.  
3Ô∏è‚É£ –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–π–º–µ—Ç –¥–æ *10 –¥–Ω–µ–π*.  

–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. üìû  
"""
    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=confirm_cancel_kb)

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)

@dp.callback_query(lambda c: c.data == "decline_cancel")
async def decline_cancel(callback: types.CallbackQuery):
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏! üòä", reply_markup=main_menu_kb)

@dp.callback_query(lambda c: c.data == "how_to_order")
async def how_to_order(callback: types.CallbackQuery):
    message_text = """üì¶ *–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?*

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É.  
2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤.  
3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–≤–æ–∑–∞.  
4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.  
5Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞.  

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Ö –Ω–∏–∂–µ:  
"""
    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=order_faq_kb)

@dp.callback_query(lambda c: c.data == "payment_issue")
async def payment_issue(callback: types.CallbackQuery):
    message_text = """üí≥ *–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ*  

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π:  
‚úÖ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ.  
‚úÖ –ë–∞–Ω–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–ª–∞—Ç–µ–∂ ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.  
‚úÖ –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã.  
‚úÖ –ü–ª–∞—Ç–µ–∂ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.  

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∏–ª–∞—Å—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–∞–Ω–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.  
"""
    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=order_faq_kb)

@dp.callback_query(lambda c: c.data == "address_issue")
async def address_issue(callback: types.CallbackQuery):
    message_text = """üìç *–ù–µ –º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –∞–¥—Ä–µ—Å*  

1Ô∏è‚É£ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.  
2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –≤–∞—à —Ä–µ–≥–∏–æ–Ω.  
3Ô∏è‚É£ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.  
4Ô∏è‚É£ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.  

–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É.  
"""
    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=order_faq_kb)

@dp.callback_query(lambda c: c.data == "cart_issue")
async def cart_issue(callback: types.CallbackQuery):
    message_text = """üõí *–ù–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É*  

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:  
‚ùå –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.  
‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Äì –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.  
‚ùå –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω–æ–º –∑–∞–∫–∞–∑–µ.  

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.  
"""
    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=order_faq_kb)

@dp.callback_query(lambda c: c.data == "pickup_issue")
async def pickup_issue(callback: types.CallbackQuery):
    message_text = """üöö *–ü–æ—á–µ–º—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–∞–º–æ–≤—ã–≤–æ–∑?*  

üî∏ –°–∞–º–æ–≤—ã–≤–æ–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ.  
üî∏ –¢–æ–≤–∞—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.  
üî∏ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç.  

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.  
"""
    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=order_faq_kb)
@dp.callback_query(lambda c: c.data == "missing_card")
async def missing_card_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç:", reply_markup=missing_card_kb)

@dp.callback_query(lambda c: c.data == "card_not_arrived")
async def card_not_arrived(callback: types.CallbackQuery):
    await callback.message.answer("üì¶ –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –¥–æ—à–ª–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", url="https://goldapple.ru/lk/orders")],
            [InlineKeyboardButton(text="üÜò –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="support_request")]
        ]
    ))

@dp.callback_query(lambda c: c.data == "resend_sms")
async def resend_sms(callback: types.CallbackQuery):
    await callback.message.answer("üì© –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ SMS —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∞–º –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data="support_request")]
        ]
    ))

@dp.callback_query(lambda c: c.data == "shipping_time")
async def shipping_time(callback: types.CallbackQuery):
    await callback.message.answer("‚è≥ –ö–∞—Ä—Ç–∞ –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5-7 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")

@dp.callback_query(lambda c: c.data == "update_card_info")
async def update_card_info(callback: types.CallbackQuery):
    await callback.message.answer("‚úè –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úç –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="support_request")]
        ]
    ))

@dp.callback_query(lambda c: c.data == "how_to_buy_card")
async def how_to_buy_card(callback: types.CallbackQuery):
    await callback.message.answer("üéÅ –ö—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –º–æ–∂–Ω–æ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ](https://goldapple.ru/giftcard)", parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "how_to_use_card")
async def how_to_use_card(callback: types.CallbackQuery):
    await callback.message.answer("üõç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –ø—Ä–æ—Å—Ç–æ:\n\n- –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–∞–π—Ç–µ.\n- –ò–ª–∏ –ø–æ–∫–∞–∂–∏—Ç–µ –∫–∞—Ä—Ç—É –Ω–∞ –∫–∞—Å—Å–µ –≤ —Ä–æ–∑–Ω–∏—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ.")      
@dp.callback_query(lambda c: c.data == "gift_cards")
async def gift_cards_menu(callback: types.CallbackQuery):
    await callback.message.edit_text("üéÅ *–†–∞–∑–¥–µ–ª –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∫–∞—Ä—Ç*\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:", 
                                     parse_mode="Markdown", reply_markup=gift_cards_kb)

@dp.callback_query(lambda c: c.data == "gift_how_to_buy")
async def gift_how_to_buy(callback: types.CallbackQuery):
    await callback.message.answer("üõí –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ —Å–∞–π—Ç–µ [–∑–¥–µ—Å—å](https://goldapple.ru/giftcard).", parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "gift_how_to_use")
async def gift_how_to_use(callback: types.CallbackQuery):
    await callback.message.answer("üìñ –ü–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö –∏ –Ω–∞ —Å–∞–π—Ç–µ. –ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ.")

@dp.callback_query(lambda c: c.data == "gift_for_colleagues")
async def gift_for_colleagues(callback: types.CallbackQuery):
    await callback.message.answer("üë• –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –∫–æ–ª–ª–µ–≥. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ [–∑–¥–µ—Å—å](https://goldapple.ru/giftcard-corporate).", parse_mode="Markdown")

# –†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
balance_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üí≥ –ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è –∫–∞—Ä—Ç–∞", callback_data="gift_balance_physical")],
    [InlineKeyboardButton(text="üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞", callback_data="gift_balance_digital")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="gift_cards")]
])

@dp.callback_query(lambda c: c.data == "gift_check_balance")
async def gift_check_balance(callback: types.CallbackQuery):
    await callback.message.edit_text("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ä—Ç—ã:", reply_markup=balance_kb)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã
@dp.callback_query(lambda c: c.data == "gift_balance_physical")
async def gift_balance_physical(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã:")
    await state.set_state(BalanceCheckState.waiting_for_card_number)

@dp.message(lambda message: message.chat.id == OPERATOR_CHAT_ID and message.text.startswith("/end"))
async def operator_end_chat(message: Message):
    try:
        target_user_id = int(message.text.split()[1])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        if target_user_id in active_chats:
            active_chats.pop(target_user_id)
            await bot.send_message(target_user_id, "üì¥ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.")
            await message.answer(f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {target_user_id} –∑–∞–≤–µ—Ä—à—ë–Ω.")
        else:
            await message.answer("‚ùó –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    except (IndexError, ValueError):
        await message.answer("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è].")

@dp.message(BalanceCheckState.waiting_for_card_number)
async def process_card_number(message: types.Message, state: FSMContext):
    card_number = message.text.strip()
    if not card_number.isdigit() or len(card_number) not in [16, 19]:  
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.clear()
    await message.answer(
        "‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ [–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç](https://goldapple.ru/login)\n"
        "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–∞—Ä—Ç–æ–π\n"
        "3Ô∏è‚É£ –í —Ä–∞–∑–¥–µ–ª–µ *'–ú–æ–∏ –∫–∞—Ä—Ç—ã'* –Ω–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å",
        parse_mode="Markdown"
    )
# –†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
digital_card_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", url="https://goldapple.ru/check-balance")],
    [InlineKeyboardButton(text="‚ö† –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—Ä—Ç–æ–π", callback_data="gift_balance_problem")],
    [InlineKeyboardButton(text="‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="gift_balance_other")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="gift_check_balance")]
])

@dp.callback_query(lambda c: c.data == "gift_balance_digital")
async def gift_balance_digital(callback: types.CallbackQuery):
    await callback.message.edit_text("üìß –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=digital_card_kb)

@dp.callback_query(lambda c: c.data == "gift_balance_problem")
@dp.callback_query(lambda c: c.data == "gift_balance_other")
async def gift_balance_support(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"
    phone_number = user_contacts.get(user_id, "–ù–µ —É–∫–∞–∑–∞–Ω")

    active_chats[user_id] = True
    await state.set_state(SupportState.in_chat)

    await bot.send_message(OPERATOR_CHAT_ID, f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–º –∫–∞—Ä—Ç–∞–º!\n"
                                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                                             f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                                             f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.")
    await callback.message.answer("‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.")
#

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º!", reply_markup=phone_kb)

user_contacts = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: phone_number}

@dp.message(lambda message: message.contact)
async def handle_contact(message: Message):
    user_id = message.from_user.id
    if user_id in user_contacts:
        await message.answer("üìå –ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –Ω–æ–º–µ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)
    else:
        user_contacts[user_id] = message.contact.phone_number
        await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–∞–∫ –±—É–¥–µ—Ç –ª–µ–≥—á–µ –ø–æ–º–æ—á—å –≤–∞–º!", reply_markup=types.ReplyKeyboardRemove())
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)

sales_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="10% –Ω–∞ –ü–ï–†–í–´–ô –∑–∞–∫–∞–∑", callback_data="first_order_discount")],
    [InlineKeyboardButton(text="–°–∫–∏–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ", callback_data="card_discount")],
    [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_main")]
])
@dp.callback_query(lambda c: c.data == "first_order_discount")
async def first_order_discount(callback: types.CallbackQuery):
    await callback.message.answer("üéâ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 10% —Å–∫–∏–¥–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ *WELCOME10* –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏!", parse_mode="Markdown")

@dp.callback_query(lambda c: c.data == "card_discount")
async def card_discount(callback: types.CallbackQuery):
    await callback.message.answer("üí≥ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞—Ä—Ç–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∫–µ—à–±—ç–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏!")

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)

@dp.callback_query(lambda c: c.data == "sales")
async def show_sales(callback: types.CallbackQuery):
    message_text = """üî• *–ê–ö–¶–ò–ò –ò –°–ö–ò–î–ö–ò* üî•

üéÅ *10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑!*  
–ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑.  

üí≥ *–°–∫–∏–¥–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ*  
–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –∫–∞—Ä—Ç–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!  

üìÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ [–∑–¥–µ—Å—å](https://goldapple.ru/sale).
"""

    await callback.message.edit_text(message_text, parse_mode="Markdown", reply_markup=sales_kb)

@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu_kb)


@dp.callback_query(lambda c: c.data == "support_request")
async def support_request(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"
    phone_number = user_contacts.get(user_id, "–ù–µ —É–∫–∞–∑–∞–Ω")

    if user_id in active_chats:
        await callback.message.answer("‚ùó –í—ã —É–∂–µ –Ω–∞ —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    
    active_chats[user_id] = True
    await state.set_state(SupportState.in_chat)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await bot.send_message(OPERATOR_CHAT_ID, f"üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n"
                                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                                             f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n"
                                             f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await callback.message.answer("‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")

@dp.message()
async def handle_messages(message: Message, state: FSMContext):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in active_chats:
        await bot.send_message(OPERATOR_CHAT_ID, f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}")
        return

    # –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —á–∞—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    if message.chat.id == OPERATOR_CHAT_ID:
        try:
            split_msg = message.text.split(" ", 1)
            target_user_id = int(split_msg[0])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reply_text = split_msg[1]  # –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞

            if target_user_id in active_chats:
                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
                buttons = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", callback_data=f"more_questions_{target_user_id}")],
                    [InlineKeyboardButton(text="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_chat_{target_user_id}")]
                ])
                
                await bot.send_message(target_user_id, f"üë®‚Äçüíº –û–ø–µ—Ä–∞—Ç–æ—Ä: {reply_text}", reply_markup=buttons)
            else:
                await message.answer("‚ùó –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
        except (IndexError, ValueError):
            await message.answer("‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


@dp.callback_query(lambda c: c.data.startswith("more_questions_"))
async def more_questions(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])

    if user_id in active_chats:
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: "–í–≤–µ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å" –∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç"
        question_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", callback_data=f"end_chat_{user_id}")]
        ])
        await bot.send_message(user_id, "ü§î –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å? –ò–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç?", reply_markup=question_kb)
        await state.set_state(SupportState.waiting_for_question)
    else:
        await callback.answer("–ß–∞—Ç —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")


@dp.message(SupportState.waiting_for_question)
async def handle_more_questions(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id in active_chats:
        await bot.send_message(OPERATOR_CHAT_ID, f"üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_id}: {message.text}")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        buttons = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?", callback_data=f"more_questions_{user_id}")],
            [InlineKeyboardButton(text="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data=f"end_chat_{user_id}")]
        ])
        await bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç–∏—Ç —Å–∫–æ—Ä–æ.", reply_markup=buttons)
        await state.set_state(SupportState.in_chat)


@dp.callback_query(lambda c: c.data.startswith("end_chat_"))
async def end_chat_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])

    if user_id in active_chats:
        active_chats.pop(user_id)
        await bot.send_message(user_id, "üì¥ –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.")
        await bot.send_message(OPERATOR_CHAT_ID, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
        await state.clear()
    await callback.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
